CONTAINER
docker container create [image-name]		이미지를 바탕으로 컨테이너를 생성한다.
docker container start [container-name]	container 시작(시작 이후 프로그램이 끝나면 알아서 종료된다)
docker container restart [container-name]	container 재시작
docker container rm [container name]		container 삭제


docker container ls -a 	현재 도커에 추가된 컨테이너 목록 모두 출력
docker container ls  	현재 도커에 추가된 컨테이너 목록 모두 출력(런타임 실행 중인 이미지만 출력)




IMAGE
docker pull [image-name]	이미지 파일을 도커에 저장한다 	
docker run [image-name] 	실행 때마다 새로운 컨테이너를 생성해버린다
				* 만약 image가 없을 경우 자동으로 pull하게 된다.
	- docker run -it -d 3e /bin/sh -> 컨테이너 백그라운드 실행
	- docker run -it -d  -p 8080:80 3e /bin/sh -> 포트 지정 (host-port:container-port)

docker image rm [image-name/image-id]	image를 삭제한다(image 삭제 이전, image가 탑재된 container를 먼저 삭제해야한다)

docker image ls -a		현재 도커에 추가된 이미지 목록 모두 출력


docker image pull docker/getting-started


tomcat2 - 80


docker repository에 자기가 생성한 이미지 커밋하기
docker tag local-image:tagname new-repo:tagname
docker push new-repo:tagname


container 생성 시, 백그라운드에서 계속해서 동작하게 하기
docker container create -it myubuntu

docker attach와 exec의 차이
	- attach는 host pc의 stdin/stdout을 컨테이너와 연결하여 컨테이너에 직접 접속하는 것
		=> attach를 통해 접속한 후, 컨테이너를 벗어나면 컨테이너가 종료된다.
	- exec은 컨테이너 외부에서 컨테이너 내부로 명령어를 전송하는 것
		=> exec을 통해 접속한 후, 컨테이너를 벗어나도 컨테이너가 종료되지 않는다.
